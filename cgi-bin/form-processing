#!/usr/bin/env perl

use strict;
use warnings;

###################
### subroutines ###
###################

### sanitise

sub sanitise {
  my $str = shift @_ || die("no argument supplied");

  # escape html tags
  $str =~ s/</&lt;/g;
  $str =~ s/>/&gt;/g;

  # strip newlines (and maybe carridge returns)
  $str =~ s/\r?\n/ /g;

  # remove null characters
  $str =~ s/\0//g;

  return $str;
}

############
# preamble #
############

use CGI qw(:standard);
use Log::Log4perl;
use YAML::XS qw(LoadFile);                  # for the config
use Email::Sender::Transport::SMTP::TLS;    # for the transport
use Email::Stuffer;                         # for the email


# set up the log file
my $conf = q(
  log4perl.rootLogger = INFO, Syslog
  log4perl.appender.Syslog = Log::Dispatch::Syslog
  log4perl.appender.Syslog.ident = form-processing
  log4perl.appender.Syslog.facility = local0
  log4perl.appender.Syslog.layout = SimpleLayout
);

Log::Log4perl::init(\$conf);
my $logger = Log::Log4perl->get_logger();

$logger->info("Form handler started");

### FIXME
# the log file needs locking for thread safety

# get timestamp
my (
	$SEC,
	$MIN,
	$HOUR,
	$DAY,
	$MONTH,
	$YEAR,
);

($SEC, $MIN, $HOUR, $DAY, $MONTH, $YEAR) = (gmtime)[0,1,2,3,4,5];

my $timestamp = sprintf("%02d:%02d:%02d %02d-%02d-%04d", 
  $HOUR+1, $MIN, $SEC, $DAY, $MONTH+1, $YEAR+1900);

$logger->info("form-processing running at: $timestamp");


# use cgi module to extract the info from the submitted form
my $q = CGI->new;	                    # q for query

my $err = $q->cgi_error;              # check for errors

if ($err) {
  $logger->error("CGI error: $err");
}

### FIXME need better sanitisation

my $q_name    = sanitise($q->param('name') || '');
my $q_email   = sanitise($q->param('email') || '');
my $q_subject = sanitise($q->param('subject') || '');
my $q_message = sanitise($q->param('message') || '');

###################
# log the message #
###################

my $log_text = <<EOF;
$timestamp
name: $q_name
email address: $q_email
subject line: $q_subject
message content:
$q_message
EOF

$logger->info("$log_text");

#################
# send the mail #
#################

### FIXME
# dont bother with the config file
# but loaded it all from the environment
### TODO
# create a .env file, and load it

my $config = LoadFile('/var/www/cgi-bin/config.yaml');

#
# example config.yaml
#
#mail:
#  send_from: email@email.com
#  send_to: email@email.com
#
#smtp:
#  host: smtp.gmail.com
#  port: 587
#
#starttls:
#  user: email@email.com
#  pw: some app pass word
#

### mail ###

my $mail_conf = $config->{mail};
my $send_from = $mail_conf->{send_from};
my $send_to   = $mail_conf->{send_to};

### server ###

my $smtp_conf = $config->{smtp};
my $server = $smtp_conf->{host};
my $port = $smtp_conf->{port};

### auth ###

my $starttls_conf = $config->{starttls};
my $user = $starttls_conf->{user};
my $pw = $starttls_conf->{pw};

my $transport = Email::Sender::Transport::SMTP::TLS->new({
    host     => $server,
    port     => $port,
    username => $user,
    password => $pw,
    timeout  => 20,
});

my $subject = "Message from [$q_name]: $q_subject"; ### FIXME

my $email_text = <<EOF;
The following form was submitted at $timestamp.
FROM:
$q_name
EMAIL:
$q_email
SUBJECT:
$q_subject
MESSAGE:
$q_message
EOF

my $email = Email::Stuffer->from($send_from)
                          ->to($send_to)
                          ->subject($subject)
                          ->text_body($email_text)
                          ->transport($transport);

$email->send_or_die;

#####################
# respond to client #
#####################

print $q->header('application/json');

print qq({
  "status": "success",
  "message": "thanks $q_name, your message has been sent."
});
